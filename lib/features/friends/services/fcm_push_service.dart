import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:googleapis_auth/auth_io.dart' as auth;
import 'package:get_it/get_it.dart';
import '../../notifications/data/datasources/notification_local_notification_datasource.dart';
import '../../notifications/domain/repositories/notification_repository.dart';
import '../../notifications/domain/entities/notification.dart';
import '../../notifications/presentation/cubit/notification_cubit.dart';
import 'notification_navigation_service.dart';

final GetIt sl = GetIt.instance;

class FCMPushService {
  // Firebase Admin SDK credentials
  static const String _projectId = 'chatas-9469d';
  static const String _fcmSendUrl =
      'https://fcm.googleapis.com/v1/projects/$_projectId/messages:send';

  // Service Account credentials - TODO: Move to secure storage
  static Map<String, dynamic>? _serviceAccountCredentials;

  /// Initialize service account credentials from secure source
  static void initializeCredentials(Map<String, dynamic> credentials) {
    _serviceAccountCredentials = credentials;
  }

  /// L·∫•y FCM token c·ªßa thi·∫øt b·ªã hi·ªán t·∫°i
  static Future<String?> getDeviceToken() async {
    try {
      final token = await FirebaseMessaging.instance.getToken();
      print('üì± Device FCM Token: ${token?.substring(0, 20)}...');
      return token;
    } catch (e) {
      print('‚ùå L·ªói l·∫•y FCM token: $e');
      return null;
    }
  }

  /// L∆∞u FCM token v√†o Firestore khi user ƒëƒÉng nh·∫≠p
  static Future<void> saveTokenToFirestore(String userId) async {
    try {
      final token = await getDeviceToken();
      if (token != null && token.isNotEmpty) {
        await FirebaseFirestore.instance.collection('users').doc(userId).set({
          'fcmToken': token,
          'lastTokenUpdate': FieldValue.serverTimestamp(),
        }, SetOptions(merge: true));

        print('‚úÖ ƒê√£ l∆∞u FCM token cho user: $userId');
      }
    } catch (e) {
      print('‚ùå L·ªói l∆∞u FCM token: $e');
    }
  }

  /// L·∫•y FCM token c·ªßa user kh√°c t·ª´ Firestore
  static Future<String?> getUserToken(String userId) async {
    try {
      final doc = await FirebaseFirestore.instance
          .collection('users')
          .doc(userId)
          .get();

      if (doc.exists && doc.data() != null) {
        final token = doc.data()?['fcmToken'] as String?;
        if (token != null && token.isNotEmpty) {
          print(
            'üîç Found FCM token cho user $userId: ${token.substring(0, 20)}...',
          );
          return token;
        }
      }
      print('‚ùå Kh√¥ng t√¨m th·∫•y FCM token cho user: $userId');
      return null;
    } catch (e) {
      print('‚ùå L·ªói l·∫•y FCM token c·ªßa user $userId: $e');
      return null;
    }
  }

  /// L·∫•y Access Token cho Firebase Admin SDK
  static Future<String?> getAccessToken() async {
    try {
      if (_serviceAccountCredentials == null) {
        print('‚ùå Service account credentials ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
        return null;
      }

      // Debug: ki·ªÉm tra th√¥ng tin credentials
      print('üîç Debug credentials keys: ${_serviceAccountCredentials!.keys}');
      print('üîç Project ID: ${_serviceAccountCredentials!['project_id']}');
      print('üîç Client email: ${_serviceAccountCredentials!['client_email']}');
      print(
        'üîç Private key ID: ${_serviceAccountCredentials!['private_key_id']}',
      );

      final privateKey =
          _serviceAccountCredentials!['private_key']?.toString() ?? '';
      print('üîç Private key length: ${privateKey.length}');
      print('üîç Private key starts with: ${privateKey.substring(0, 50)}...');
      print(
        'üîç Private key ends with: ...${privateKey.substring(privateKey.length - 50)}',
      );

      // Validate private key format
      if (!privateKey.contains('-----BEGIN PRIVATE KEY-----') ||
          !privateKey.contains('-----END PRIVATE KEY-----')) {
        print('‚ùå Private key format invalid - missing BEGIN/END markers');
        return null;
      }

      // Check for proper newlines
      final lines = privateKey.split('\n');
      print('üîç Private key has ${lines.length} lines');
      if (lines.length < 3) {
        print('‚ùå Private key doesn\'t have proper line breaks');
        return null;
      }

      // T·∫°o service account credentials t·ª´ JSON v·ªõi explicit clock skew
      final accountCredentials = auth.ServiceAccountCredentials.fromJson(
        _serviceAccountCredentials!,
      );

      print('üîç ServiceAccount created successfully');

      // T·∫°o OAuth2 client v·ªõi scope FCM v√† clock skew tolerance
      final scopes = ['https://www.googleapis.com/auth/firebase.messaging'];
      print('üîç Creating OAuth2 client with scopes: $scopes');

      final authClient = await auth.clientViaServiceAccount(
        accountCredentials,
        scopes,
      );

      print('üîç OAuth2 client created successfully');

      // L·∫•y access token
      final accessToken = authClient.credentials.accessToken.data;
      authClient.close();

      print(
        '‚úÖ ƒê√£ l·∫•y access token th√†nh c√¥ng: ${accessToken.substring(0, 20)}...',
      );
      return accessToken;
    } catch (e) {
      print('‚ùå Chi ti·∫øt l·ªói getAccessToken: $e');
      print('‚ùå Error type: ${e.runtimeType}');

      // Additional debug for JWT errors
      if (e.toString().contains('Invalid JWT Signature')) {
        print('üîç JWT Signature error - c√≥ th·ªÉ do:');
        print('   - Private key format kh√¥ng ƒë√∫ng');
        print('   - Clock skew (th·ªùi gian h·ªá th·ªëng kh√¥ng ƒë·ªìng b·ªô)');
        print('   - Service account b·ªã disabled');
        print('üîß Th·ª≠ t·∫°o l·∫°i service account key m·ªõi t·ª´ Firebase Console');
      }

      return null;
    }
  }

  /// G·ª≠i FCM th√¥ng qua Firebase Admin API v1
  static Future<bool> sendNotificationWithAdminSDK({
    required String toUserId,
    required String title,
    required String body,
    Map<String, dynamic>? data,
  }) async {
    try {
      print('üì§ G·ª≠i FCM Admin API notification ƒë·∫øn user: $toUserId');

      // 1. L·∫•y FCM token c·ªßa ng∆∞·ªùi nh·∫≠n
      final recipientToken = await getUserToken(toUserId);
      if (recipientToken == null || recipientToken.isEmpty) {
        print('‚ùå Kh√¥ng t√¨m th·∫•y FCM token cho user: $toUserId');
        return false;
      }

      // 2. L·∫•y access token
      final accessToken = await getAccessToken();
      if (accessToken == null) {
        print('‚ùå Kh√¥ng th·ªÉ l·∫•y access token');
        return false;
      }

      // 3. T·∫°o payload cho Firebase Admin API v1
      final payload = {
        'message': {
          'token': recipientToken,
          'notification': {'title': title, 'body': body},
          'data': {
            'type': 'friend_notification',
            'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
            ...?data,
          },
          'android': {
            'priority': 'high',
            'notification': {
              'channel_id': 'friend_notifications',
              'sound': 'default',
            },
          },
          'apns': {
            'headers': {'apns-priority': '10'},
            'payload': {
              'aps': {
                'alert': {'title': title, 'body': body},
                'sound': 'default',
                'badge': 1,
              },
            },
          },
        },
      };

      print('üìã FCM Admin API Payload:');
      print('   Title: $title');
      print('   Body: $body');
      print('   To Token: ${recipientToken.substring(0, 20)}...');

      // 4. G·ª≠i HTTP request ƒë·∫øn Firebase Admin API
      final response = await http.post(
        Uri.parse(_fcmSendUrl),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $accessToken',
        },
        body: json.encode(payload),
      );

      print('üì° FCM Admin API Response Status: ${response.statusCode}');
      print('üì° FCM Admin API Response Body: ${response.body}');

      if (response.statusCode == 200) {
        print('‚úÖ FCM Admin API notification sent successfully!');
        return true;
      } else {
        print(
          '‚ùå FCM Admin API Error: ${response.statusCode} - ${response.body}',
        );
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi g·ª≠i FCM Admin API: $e');
      return false;
    }
  }

  /// G·ª≠i FCM th√¥ng qua Legacy API (s·ª≠ d·ª•ng Server Key)
  static Future<bool> sendNotificationLegacy({
    required String toUserId,
    required String title,
    required String body,
    Map<String, dynamic>? data,
  }) async {
    try {
      print('üì§ G·ª≠i FCM notification ƒë·∫øn user: $toUserId');

      // 1. L·∫•y FCM token c·ªßa ng∆∞·ªùi nh·∫≠n
      final recipientToken = await getUserToken(toUserId);
      if (recipientToken == null || recipientToken.isEmpty) {
        print('‚ùå Kh√¥ng t√¨m th·∫•y FCM token cho user: $toUserId');
        return false;
      }

      // 2. Server Key t·ª´ Firebase Console (Legacy Cloud Messaging API)
      // TODO: L·∫•y Server Key t·ª´ Firebase Console > Project Settings > Cloud Messaging
      const serverKey =
          'AAAA_YOUR_SERVER_KEY_HERE'; // C·∫ßn thay th·∫ø b·∫±ng key th·ª±c t·∫ø

      // 3. T·∫°o payload cho FCM legacy API
      final payload = {
        'to': recipientToken,
        'notification': {
          'title': title,
          'body': body,
          'sound': 'default',
          'badge': 1,
          'click_action': 'FLUTTER_NOTIFICATION_CLICK',
        },
        'data': {
          'type': 'friend_notification',
          'click_action': 'FLUTTER_NOTIFICATION_CLICK',
          'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
          ...?data,
        },
        'priority': 'high',
        'content_available': true,
      };

      print('üìã FCM Payload:');
      print('   Title: $title');
      print('   Body: $body');
      print('   To Token: ${recipientToken.substring(0, 20)}...');

      // 4. G·ª≠i HTTP request ƒë·∫øn FCM Legacy API
      final response = await http.post(
        Uri.parse('https://fcm.googleapis.com/fcm/send'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'key=$serverKey',
        },
        body: json.encode(payload),
      );

      print('üì° FCM Response Status: ${response.statusCode}');
      print('üì° FCM Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        if (responseData['success'] == 1) {
          print('‚úÖ FCM notification sent successfully!');
          return true;
        } else {
          print('‚ùå FCM failed: ${responseData['results']?[0]?['error']}');
          return false;
        }
      } else {
        print('‚ùå HTTP Error: ${response.statusCode} - ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi g·ª≠i FCM: $e');
      return false;
    }
  }

  /// G·ª≠i th√¥ng b√°o push ƒë·∫øn user c·ª• th·ªÉ
  static Future<bool> sendNotificationToUser({
    required String toUserId,
    required String title,
    required String body,
    Map<String, dynamic>? data,
  }) async {
    // S·ª≠ d·ª•ng Firebase Admin SDK API v1
    return await sendNotificationWithAdminSDK(
      toUserId: toUserId,
      title: title,
      body: body,
      data: data,
    );
  }

  /// Kh·ªüi t·∫°o FCM permissions v√† listeners
  static Future<void> initializeFCM() async {
    try {
      print('üöÄ ƒêang kh·ªüi t·∫°o FCM...');

      // Kh·ªüi t·∫°o local notification tr∆∞·ªõc
      await NotificationLocalNotificationDataSource.initialize();
      print('‚úÖ Local notification initialized');

      // Request notification permission
      final settings = await FirebaseMessaging.instance.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
        criticalAlert: true,
        announcement: true,
      );

      print('üì± FCM Permission Status: ${settings.authorizationStatus}');

      // L∆∞u token khi user ƒëƒÉng nh·∫≠p
      FirebaseAuth.instance.authStateChanges().listen((user) async {
        if (user != null) {
          await saveTokenToFirestore(user.uid);
        }
      });

      // Refresh token khi c√≥ thay ƒë·ªïi
      FirebaseMessaging.instance.onTokenRefresh.listen((newToken) async {
        final user = FirebaseAuth.instance.currentUser;
        if (user != null) {
          await FirebaseFirestore.instance
              .collection('users')
              .doc(user.uid)
              .update({
                'fcmToken': newToken,
                'lastTokenUpdate': FieldValue.serverTimestamp(),
              });
          print('üîÑ FCM Token refreshed cho user: ${user.uid}');
        }
      });

      // X·ª≠ l√Ω foreground messages - Hi·ªÉn th·ªã notification khi app ƒëang m·ªü
      FirebaseMessaging.onMessage.listen((RemoteMessage message) {
        print('üì± Foreground FCM Message received:');
        print('   Title: ${message.notification?.title}');
        print('   Body: ${message.notification?.body}');
        print('   Data: ${message.data}');

        // Hi·ªÉn th·ªã local notification khi app ƒëang foreground
        _showForegroundNotification(message);
      });

      // X·ª≠ l√Ω khi user tap v√†o notification (app ƒëang background)
      FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
        print('üì± Notification tapped (from background):');
        print('   Data: ${message.data}');
        _handleNotificationTap(message);
      });

      // X·ª≠ l√Ω khi app ƒë∆∞·ª£c m·ªü t·ª´ notification (app ƒë√£ ƒë√≥ng ho√†n to√†n)
      final initialMessage = await FirebaseMessaging.instance
          .getInitialMessage();
      if (initialMessage != null) {
        print('üì± App opened from notification:');
        print('   Data: ${initialMessage.data}');
        _handleNotificationTap(initialMessage);
      }

      print('‚úÖ FCM initialized successfully');
    } catch (e) {
      print('‚ùå L·ªói kh·ªüi t·∫°o FCM: $e');
    }
  }

  /// Hi·ªÉn th·ªã notification khi app ƒëang foreground
  static Future<void> _showForegroundNotification(RemoteMessage message) async {
    try {
      print('üîî Hi·ªÉn th·ªã foreground notification...');

      // L∆∞u notification v√†o database local tr∆∞·ªõc
      try {
        final notificationRepository = sl<NotificationRepository>();
        final notification = NotificationEntity(
          id: DateTime.now().millisecondsSinceEpoch.toString(),
          title: message.notification?.title ?? 'Th√¥ng b√°o',
          body: message.notification?.body ?? '',
          type: message.data['action'] ?? 'unknown',
          data: message.data,
          createdAt: DateTime.now(),
          isRead: false,
        );
        await notificationRepository.saveNotification(notification);
        print('‚úÖ ƒê√£ l∆∞u notification v√†o database local');

        // Trigger refresh notifications ·ªü UI n·∫øu c√≥ th·ªÉ
        try {
          final notificationCubit = sl<NotificationCubit>();
          notificationCubit.refreshNotifications();
          print('üîÑ ƒê√£ refresh notifications UI');
        } catch (e) {
          print('‚ö†Ô∏è  Kh√¥ng th·ªÉ refresh UI (c√≥ th·ªÉ ch∆∞a init): $e');
        }
      } catch (e) {
        print('‚ùå L·ªói l∆∞u notification v√†o database: $e');
      }

      // T·∫°o ID 32-bit t·ª´ timestamp
      final notificationId =
          (DateTime.now().millisecondsSinceEpoch % 2147483647).toInt();

      // S·ª≠ d·ª•ng NotificationLocalNotificationDataSource ƒë·ªÉ hi·ªÉn th·ªã notification
      await NotificationLocalNotificationDataSource.showNotification(
        id: notificationId,
        title: message.notification?.title ?? 'Th√¥ng b√°o',
        body: message.notification?.body ?? '',
        payload: message.data.isNotEmpty ? json.encode(message.data) : null,
      );

      print(
        '‚úÖ Foreground notification hi·ªÉn th·ªã th√†nh c√¥ng v·ªõi ID: $notificationId',
      );
    } catch (e) {
      print('‚ùå L·ªói hi·ªÉn th·ªã foreground notification: $e');
    }
  }

  /// X·ª≠ l√Ω khi user tap v√†o notification
  static void _handleNotificationTap(RemoteMessage message) {
    try {
      final data = message.data;
      print('üëÜ User tapped notification with action: ${data['action']}');

      // S·ª≠ d·ª•ng NotificationNavigationService ƒë·ªÉ navigate
      NotificationNavigationService.handleNotificationTap(data);
    } catch (e) {
      print('‚ùå L·ªói x·ª≠ l√Ω notification tap: $e');
    }
  }
}
