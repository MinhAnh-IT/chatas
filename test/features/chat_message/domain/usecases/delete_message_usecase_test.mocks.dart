// Mocks generated by Mockito 5.4.6 from annotations
// in chatas/test/features/chat_message/domain/usecases/delete_message_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:chatas/features/chat_message/domain/entities/chat_message.dart'
    as _i4;
import 'package:chatas/features/chat_message/domain/repositories/chat_message_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ChatMessageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatMessageRepository extends _i1.Mock
    implements _i2.ChatMessageRepository {
  MockChatMessageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ChatMessage>> getMessages(
    String? chatThreadId,
    String? currentUserId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMessages, [chatThreadId, currentUserId]),
            returnValue: _i3.Future<List<_i4.ChatMessage>>.value(
              <_i4.ChatMessage>[],
            ),
          )
          as _i3.Future<List<_i4.ChatMessage>>);

  @override
  _i3.Stream<List<_i4.ChatMessage>> messagesStream(
    String? chatThreadId,
    String? currentUserId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#messagesStream, [chatThreadId, currentUserId]),
            returnValue: _i3.Stream<List<_i4.ChatMessage>>.empty(),
          )
          as _i3.Stream<List<_i4.ChatMessage>>);

  @override
  _i3.Future<void> sendMessage(_i4.ChatMessage? message) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [message]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateMessage(_i4.ChatMessage? message) =>
      (super.noSuchMethod(
            Invocation.method(#updateMessage, [message]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMessage(String? messageId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMessage, [messageId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> editMessage({
    required String? messageId,
    required String? newContent,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#editMessage, [], {
              #messageId: messageId,
              #newContent: newContent,
              #userId: userId,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMessageWithValidation({
    required String? messageId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMessageWithValidation, [], {
              #messageId: messageId,
              #userId: userId,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> addReaction(
    String? messageId,
    String? userId,
    _i4.ReactionType? reaction,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addReaction, [messageId, userId, reaction]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeReaction(String? messageId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#removeReaction, [messageId, userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> markMessagesAsRead(String? chatThreadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#markMessagesAsRead, [chatThreadId, userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
