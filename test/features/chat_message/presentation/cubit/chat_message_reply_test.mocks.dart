// Mocks generated by Mockito 5.4.6 from annotations
// in chatas/test/features/chat_message/presentation/cubit/chat_message_reply_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:chatas/features/chat_message/domain/entities/chat_message.dart'
    as _i6;
import 'package:chatas/features/chat_message/domain/repositories/chat_message_repository.dart'
    as _i2;
import 'package:chatas/features/chat_message/domain/usecases/add_reaction_usecase.dart'
    as _i8;
import 'package:chatas/features/chat_message/domain/usecases/delete_message_usecase.dart'
    as _i11;
import 'package:chatas/features/chat_message/domain/usecases/edit_message_usecase.dart'
    as _i10;
import 'package:chatas/features/chat_message/domain/usecases/get_messages_stream_usecase.dart'
    as _i4;
import 'package:chatas/features/chat_message/domain/usecases/remove_reaction_usecase.dart'
    as _i9;
import 'package:chatas/features/chat_message/domain/usecases/send_message_usecase.dart'
    as _i7;
import 'package:chatas/features/chat_thread/domain/entities/chat_thread.dart'
    as _i13;
import 'package:chatas/features/chat_thread/domain/repositories/chat_thread_repository.dart'
    as _i3;
import 'package:chatas/features/chat_thread/domain/usecases/send_first_message_usecase.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatMessageRepository_0 extends _i1.SmartFake
    implements _i2.ChatMessageRepository {
  _FakeChatMessageRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeChatThreadRepository_1 extends _i1.SmartFake
    implements _i3.ChatThreadRepository {
  _FakeChatThreadRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetMessagesStreamUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMessagesStreamUseCase extends _i1.Mock
    implements _i4.GetMessagesStreamUseCase {
  MockGetMessagesStreamUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatMessageRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatMessageRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ChatMessageRepository);

  @override
  _i5.Stream<List<_i6.ChatMessage>> call(String? chatThreadId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [chatThreadId]),
            returnValue: _i5.Stream<List<_i6.ChatMessage>>.empty(),
          )
          as _i5.Stream<List<_i6.ChatMessage>>);
}

/// A class which mocks [SendMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMessageUseCase extends _i1.Mock
    implements _i7.SendMessageUseCase {
  MockSendMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatMessageRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatMessageRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ChatMessageRepository);

  @override
  _i5.Future<void> call({
    required String? chatThreadId,
    required String? content,
    required String? senderId,
    required String? senderName,
    String? senderAvatarUrl,
    _i6.MessageType? type = _i6.MessageType.text,
    String? replyToMessageId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #chatThreadId: chatThreadId,
              #content: content,
              #senderId: senderId,
              #senderName: senderName,
              #senderAvatarUrl: senderAvatarUrl,
              #type: type,
              #replyToMessageId: replyToMessageId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [AddReactionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddReactionUseCase extends _i1.Mock
    implements _i8.AddReactionUseCase {
  MockAddReactionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatMessageRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatMessageRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ChatMessageRepository);

  @override
  _i5.Future<void> call({
    required String? messageId,
    required _i6.ReactionType? reaction,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #messageId: messageId,
              #reaction: reaction,
              #userId: userId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [RemoveReactionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveReactionUseCase extends _i1.Mock
    implements _i9.RemoveReactionUseCase {
  MockRemoveReactionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> call({
    required String? messageId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #messageId: messageId,
              #userId: userId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [EditMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockEditMessageUseCase extends _i1.Mock
    implements _i10.EditMessageUseCase {
  MockEditMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> call({
    required String? messageId,
    required String? newContent,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #messageId: messageId,
              #newContent: newContent,
              #userId: userId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [DeleteMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteMessageUseCase extends _i1.Mock
    implements _i11.DeleteMessageUseCase {
  MockDeleteMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> call({
    required String? messageId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #messageId: messageId,
              #userId: userId,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [SendFirstMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendFirstMessageUseCase extends _i1.Mock
    implements _i12.SendFirstMessageUseCase {
  MockSendFirstMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ChatThreadRepository get chatThreadRepository =>
      (super.noSuchMethod(
            Invocation.getter(#chatThreadRepository),
            returnValue: _FakeChatThreadRepository_1(
              this,
              Invocation.getter(#chatThreadRepository),
            ),
          )
          as _i3.ChatThreadRepository);

  @override
  _i2.ChatMessageRepository get chatMessageRepository =>
      (super.noSuchMethod(
            Invocation.getter(#chatMessageRepository),
            returnValue: _FakeChatMessageRepository_0(
              this,
              Invocation.getter(#chatMessageRepository),
            ),
          )
          as _i2.ChatMessageRepository);

  @override
  _i5.Future<String> call({
    required _i13.ChatThread? chatThread,
    required _i6.ChatMessage? message,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #chatThread: chatThread,
              #message: message,
            }),
            returnValue: _i5.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#call, [], {
                  #chatThread: chatThread,
                  #message: message,
                }),
              ),
            ),
          )
          as _i5.Future<String>);
}
