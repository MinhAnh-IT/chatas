// Mocks generated by Mockito 5.4.6 from annotations
// in chatas/test/features/notifications/presentation/cubit/notification_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chatas/features/notifications/domain/entities/notification.dart'
    as _i6;
import 'package:chatas/features/notifications/domain/repositories/notification_repository.dart'
    as _i2;
import 'package:chatas/features/notifications/domain/usecases/get_notifications.dart'
    as _i5;
import 'package:chatas/features/notifications/domain/usecases/get_unread_notifications_count.dart'
    as _i7;
import 'package:chatas/features/notifications/domain/usecases/initialize_notifications.dart'
    as _i3;
import 'package:chatas/features/notifications/domain/usecases/mark_notification_as_read.dart'
    as _i8;
import 'package:chatas/features/notifications/domain/usecases/send_friend_accepted_notification.dart'
    as _i10;
import 'package:chatas/features/notifications/domain/usecases/send_friend_request_notification.dart'
    as _i9;
import 'package:chatas/features/notifications/domain/usecases/send_new_message_notification.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotificationRepository_0 extends _i1.SmartFake
    implements _i2.NotificationRepository {
  _FakeNotificationRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [InitializeNotifications].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitializeNotifications extends _i1.Mock
    implements _i3.InitializeNotifications {
  MockInitializeNotifications() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeNotificationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.NotificationRepository);

  @override
  _i4.Future<void> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [GetNotifications].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNotifications extends _i1.Mock implements _i5.GetNotifications {
  MockGetNotifications() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeNotificationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.NotificationRepository);

  @override
  _i4.Future<List<_i6.NotificationEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i6.NotificationEntity>>.value(
              <_i6.NotificationEntity>[],
            ),
          )
          as _i4.Future<List<_i6.NotificationEntity>>);
}

/// A class which mocks [GetUnreadNotificationsCount].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUnreadNotificationsCount extends _i1.Mock
    implements _i7.GetUnreadNotificationsCount {
  MockGetUnreadNotificationsCount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeNotificationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.NotificationRepository);

  @override
  _i4.Future<int> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}

/// A class which mocks [MarkNotificationAsRead].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkNotificationAsRead extends _i1.Mock
    implements _i8.MarkNotificationAsRead {
  MockMarkNotificationAsRead() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeNotificationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.NotificationRepository);

  @override
  _i4.Future<void> call(String? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [notificationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SendFriendRequestNotification].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendFriendRequestNotification extends _i1.Mock
    implements _i9.SendFriendRequestNotification {
  MockSendFriendRequestNotification() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeNotificationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.NotificationRepository);

  @override
  _i4.Future<void> call({
    required String? friendName,
    required String? friendId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #friendName: friendName,
              #friendId: friendId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SendFriendAcceptedNotification].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendFriendAcceptedNotification extends _i1.Mock
    implements _i10.SendFriendAcceptedNotification {
  MockSendFriendAcceptedNotification() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeNotificationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.NotificationRepository);

  @override
  _i4.Future<void> call({
    required String? friendName,
    required String? friendId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #friendName: friendName,
              #friendId: friendId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SendNewMessageNotification].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendNewMessageNotification extends _i1.Mock
    implements _i11.SendNewMessageNotification {
  MockSendNewMessageNotification() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeNotificationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.NotificationRepository);

  @override
  _i4.Future<void> call({
    required String? senderName,
    required String? senderId,
    required String? receiverId,
    required String? chatThreadId,
    required String? messageContent,
    bool? isGroupChat = false,
    String? groupName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #senderName: senderName,
              #senderId: senderId,
              #receiverId: receiverId,
              #chatThreadId: chatThreadId,
              #messageContent: messageContent,
              #isGroupChat: isGroupChat,
              #groupName: groupName,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
