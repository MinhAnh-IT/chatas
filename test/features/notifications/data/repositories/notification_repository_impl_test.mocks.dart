// Mocks generated by Mockito 5.4.6 from annotations
// in chatas/test/features/notifications/data/repositories/notification_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chatas/features/notifications/data/datasources/notification_local_datasource.dart'
    as _i3;
import 'package:chatas/features/notifications/data/datasources/notification_remote_datasource.dart'
    as _i6;
import 'package:chatas/features/notifications/data/models/notification_model.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NotificationLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationLocalDataSource extends _i1.Mock
    implements _i3.NotificationLocalDataSource {
  MockNotificationLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> insertNotification(_i5.NotificationModel? notification) =>
      (super.noSuchMethod(
            Invocation.method(#insertNotification, [notification]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.NotificationModel>> getAllNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getAllNotifications, []),
            returnValue: _i4.Future<List<_i5.NotificationModel>>.value(
              <_i5.NotificationModel>[],
            ),
          )
          as _i4.Future<List<_i5.NotificationModel>>);

  @override
  _i4.Future<_i5.NotificationModel?> getNotificationById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationById, [id]),
            returnValue: _i4.Future<_i5.NotificationModel?>.value(),
          )
          as _i4.Future<_i5.NotificationModel?>);

  @override
  _i4.Future<void> markAsRead(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#markAsRead, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> markAllAsRead() =>
      (super.noSuchMethod(
            Invocation.method(#markAllAsRead, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteNotification(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotification, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAllNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAllNotifications, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> getUnreadCount() =>
      (super.noSuchMethod(
            Invocation.method(#getUnreadCount, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.NotificationModel>> getNotificationsByType(
    String? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationsByType, [type]),
            returnValue: _i4.Future<List<_i5.NotificationModel>>.value(
              <_i5.NotificationModel>[],
            ),
          )
          as _i4.Future<List<_i5.NotificationModel>>);

  @override
  _i4.Future<List<_i5.NotificationModel>> getUnreadNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getUnreadNotifications, []),
            returnValue: _i4.Future<List<_i5.NotificationModel>>.value(
              <_i5.NotificationModel>[],
            ),
          )
          as _i4.Future<List<_i5.NotificationModel>>);

  @override
  _i4.Future<void> cleanOldNotifications({int? keepCount = 100}) =>
      (super.noSuchMethod(
            Invocation.method(#cleanOldNotifications, [], {
              #keepCount: keepCount,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [NotificationRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRemoteDataSource extends _i1.Mock
    implements _i6.NotificationRemoteDataSource {
  MockNotificationRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.NotificationModel> get onForegroundMessage =>
      (super.noSuchMethod(
            Invocation.getter(#onForegroundMessage),
            returnValue: _i4.Stream<_i5.NotificationModel>.empty(),
          )
          as _i4.Stream<_i5.NotificationModel>);

  @override
  _i4.Stream<_i5.NotificationModel> get onBackgroundMessage =>
      (super.noSuchMethod(
            Invocation.getter(#onBackgroundMessage),
            returnValue: _i4.Stream<_i5.NotificationModel>.empty(),
          )
          as _i4.Stream<_i5.NotificationModel>);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> getFCMToken() =>
      (super.noSuchMethod(
            Invocation.method(#getFCMToken, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<_i5.NotificationModel?> getInitialMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getInitialMessage, []),
            returnValue: _i4.Future<_i5.NotificationModel?>.value(),
          )
          as _i4.Future<_i5.NotificationModel?>);

  @override
  _i4.Future<void> subscribeToTopic(String? topic) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToTopic, [topic]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> unsubscribeFromTopic(String? topic) =>
      (super.noSuchMethod(
            Invocation.method(#unsubscribeFromTopic, [topic]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> sendTokenToServer(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#sendTokenToServer, [token]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> sendNotificationToUser({
    required String? userId,
    required _i5.NotificationModel? notification,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendNotificationToUser, [], {
              #userId: userId,
              #notification: notification,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
