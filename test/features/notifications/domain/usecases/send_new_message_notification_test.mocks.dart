// Mocks generated by Mockito 5.4.6 from annotations
// in chatas/test/features/notifications/domain/usecases/send_new_message_notification_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:chatas/features/notifications/domain/entities/notification.dart'
    as _i4;
import 'package:chatas/features/notifications/domain/repositories/notification_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepository extends _i1.Mock
    implements _i2.NotificationRepository {
  MockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String?> getFCMToken() =>
      (super.noSuchMethod(
            Invocation.method(#getFCMToken, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Stream<_i4.NotificationEntity> onForegroundMessage() =>
      (super.noSuchMethod(
            Invocation.method(#onForegroundMessage, []),
            returnValue: _i3.Stream<_i4.NotificationEntity>.empty(),
          )
          as _i3.Stream<_i4.NotificationEntity>);

  @override
  _i3.Stream<_i4.NotificationEntity> onBackgroundMessage() =>
      (super.noSuchMethod(
            Invocation.method(#onBackgroundMessage, []),
            returnValue: _i3.Stream<_i4.NotificationEntity>.empty(),
          )
          as _i3.Stream<_i4.NotificationEntity>);

  @override
  _i3.Future<_i4.NotificationEntity?> getInitialMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getInitialMessage, []),
            returnValue: _i3.Future<_i4.NotificationEntity?>.value(),
          )
          as _i3.Future<_i4.NotificationEntity?>);

  @override
  _i3.Future<void> showLocalNotification({
    required String? title,
    required String? body,
    String? imageUrl,
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#showLocalNotification, [], {
              #title: title,
              #body: body,
              #imageUrl: imageUrl,
              #data: data,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> saveNotification(_i4.NotificationEntity? notification) =>
      (super.noSuchMethod(
            Invocation.method(#saveNotification, [notification]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.NotificationEntity>> getNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getNotifications, []),
            returnValue: _i3.Future<List<_i4.NotificationEntity>>.value(
              <_i4.NotificationEntity>[],
            ),
          )
          as _i3.Future<List<_i4.NotificationEntity>>);

  @override
  _i3.Future<void> markAsRead(String? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#markAsRead, [notificationId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteNotification(String? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotification, [notificationId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllNotifications, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> getUnreadCount() =>
      (super.noSuchMethod(
            Invocation.method(#getUnreadCount, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> updateFCMTokenOnServer(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#updateFCMTokenOnServer, [token]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> sendNotificationToUser({
    required String? userId,
    required _i4.NotificationEntity? notification,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendNotificationToUser, [], {
              #userId: userId,
              #notification: notification,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
