// Mocks generated by Mockito 5.4.6 from annotations
// in chatas/test/features/chat_thread/data/repositories/chat_thread_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chatas/features/chat_thread/data/datasources/chat_thread_remote_data_source.dart'
    as _i3;
import 'package:chatas/features/chat_thread/data/models/chat_thread_model.dart'
    as _i5;
import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ChatThreadRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatThreadRemoteDataSource extends _i1.Mock
    implements _i3.ChatThreadRemoteDataSource {
  MockChatThreadRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  _i4.Future<List<_i5.ChatThreadModel>> fetchChatThreads(
    String? currentUserId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchChatThreads, [currentUserId]),
            returnValue: _i4.Future<List<_i5.ChatThreadModel>>.value(
              <_i5.ChatThreadModel>[],
            ),
          )
          as _i4.Future<List<_i5.ChatThreadModel>>);

  @override
  _i4.Future<void> addChatThread(_i5.ChatThreadModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#addChatThread, [model]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateChatThread(String? id, _i5.ChatThreadModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#updateChatThread, [id, model]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteChatThread(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteChatThread, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<List<_i5.ChatThreadModel>> chatThreadsStream(
    String? currentUserId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#chatThreadsStream, [currentUserId]),
            returnValue: _i4.Stream<List<_i5.ChatThreadModel>>.empty(),
          )
          as _i4.Stream<List<_i5.ChatThreadModel>>);
}
