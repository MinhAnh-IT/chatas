// Mocks generated by Mockito 5.4.6 from annotations
// in chatas/test/features/chat_thread/domain/usecases/send_first_message_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chatas/features/chat_message/domain/entities/chat_message.dart'
    as _i6;
import 'package:chatas/features/chat_message/domain/repositories/chat_message_repository.dart'
    as _i5;
import 'package:chatas/features/chat_thread/domain/entities/chat_thread.dart'
    as _i2;
import 'package:chatas/features/chat_thread/domain/repositories/chat_thread_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatThread_0 extends _i1.SmartFake implements _i2.ChatThread {
  _FakeChatThread_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ChatThreadRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatThreadRepository extends _i1.Mock
    implements _i3.ChatThreadRepository {
  MockChatThreadRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.ChatThread>> getChatThreads(String? currentUserId) =>
      (super.noSuchMethod(
            Invocation.method(#getChatThreads, [currentUserId]),
            returnValue: _i4.Future<List<_i2.ChatThread>>.value(
              <_i2.ChatThread>[],
            ),
          )
          as _i4.Future<List<_i2.ChatThread>>);

  @override
  _i4.Future<List<_i2.ChatThread>> getAllChatThreads(String? currentUserId) =>
      (super.noSuchMethod(
            Invocation.method(#getAllChatThreads, [currentUserId]),
            returnValue: _i4.Future<List<_i2.ChatThread>>.value(
              <_i2.ChatThread>[],
            ),
          )
          as _i4.Future<List<_i2.ChatThread>>);

  @override
  _i4.Future<List<_i2.ChatThread>> getArchivedChatThreads(
    String? currentUserId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getArchivedChatThreads, [currentUserId]),
            returnValue: _i4.Future<List<_i2.ChatThread>>.value(
              <_i2.ChatThread>[],
            ),
          )
          as _i4.Future<List<_i2.ChatThread>>);

  @override
  _i4.Future<void> createChatThread(_i2.ChatThread? chatThread) =>
      (super.noSuchMethod(
            Invocation.method(#createChatThread, [chatThread]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.ChatThread?> getChatThreadById(String? threadId) =>
      (super.noSuchMethod(
            Invocation.method(#getChatThreadById, [threadId]),
            returnValue: _i4.Future<_i2.ChatThread?>.value(),
          )
          as _i4.Future<_i2.ChatThread?>);

  @override
  _i4.Future<void> updateChatThreadMembers(
    String? threadId,
    List<String>? members,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateChatThreadMembers, [threadId, members]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateChatThreadName(String? threadId, String? name) =>
      (super.noSuchMethod(
            Invocation.method(#updateChatThreadName, [threadId, name]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateChatThreadAvatar(
    String? threadId,
    String? avatarUrl,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateChatThreadAvatar, [threadId, avatarUrl]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateChatThreadDescription(
    String? threadId,
    String? description,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateChatThreadDescription, [
              threadId,
              description,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateLastMessage(
    String? threadId,
    String? message,
    DateTime? timestamp,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateLastMessage, [
              threadId,
              message,
              timestamp,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> incrementUnreadCount(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementUnreadCount, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> resetUnreadCount(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#resetUnreadCount, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteChatThread(String? threadId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteChatThread, [threadId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> hideChatThread(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#hideChatThread, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> unhideChatThread(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#unhideChatThread, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateLastRecreatedAt(
    String? threadId,
    DateTime? timestamp,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateLastRecreatedAt, [threadId, timestamp]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> resetThreadForUser(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#resetThreadForUser, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> markThreadDeletedForUser(
    String? threadId,
    String? userId,
    DateTime? cutoff,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#markThreadDeletedForUser, [
              threadId,
              userId,
              cutoff,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> archiveThreadForUser(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#archiveThreadForUser, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> reviveThreadForUser(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#reviveThreadForUser, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> leaveGroup(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#leaveGroup, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> joinGroup(String? threadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#joinGroup, [threadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.ChatThread> findOrCreate1v1Thread(
    String? user1,
    String? user2, {
    String? threadName,
    String? avatarUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #findOrCreate1v1Thread,
              [user1, user2],
              {#threadName: threadName, #avatarUrl: avatarUrl},
            ),
            returnValue: _i4.Future<_i2.ChatThread>.value(
              _FakeChatThread_0(
                this,
                Invocation.method(
                  #findOrCreate1v1Thread,
                  [user1, user2],
                  {#threadName: threadName, #avatarUrl: avatarUrl},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.ChatThread>);

  @override
  _i4.Future<void> updateVisibilityCutoff(
    String? threadId,
    String? userId,
    DateTime? cutoff,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateVisibilityCutoff, [
              threadId,
              userId,
              cutoff,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.ChatThread>> searchChatThreads(
    String? query,
    String? currentUserId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchChatThreads, [query, currentUserId]),
            returnValue: _i4.Future<List<_i2.ChatThread>>.value(
              <_i2.ChatThread>[],
            ),
          )
          as _i4.Future<List<_i2.ChatThread>>);
}

/// A class which mocks [ChatMessageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatMessageRepository extends _i1.Mock
    implements _i5.ChatMessageRepository {
  MockChatMessageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i6.ChatMessage>> getMessages(
    String? chatThreadId,
    String? currentUserId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMessages, [chatThreadId, currentUserId]),
            returnValue: _i4.Future<List<_i6.ChatMessage>>.value(
              <_i6.ChatMessage>[],
            ),
          )
          as _i4.Future<List<_i6.ChatMessage>>);

  @override
  _i4.Future<List<_i6.ChatMessage>> getAllMessages(String? chatThreadId) =>
      (super.noSuchMethod(
            Invocation.method(#getAllMessages, [chatThreadId]),
            returnValue: _i4.Future<List<_i6.ChatMessage>>.value(
              <_i6.ChatMessage>[],
            ),
          )
          as _i4.Future<List<_i6.ChatMessage>>);

  @override
  _i4.Stream<List<_i6.ChatMessage>> messagesStream(
    String? chatThreadId,
    String? currentUserId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#messagesStream, [chatThreadId, currentUserId]),
            returnValue: _i4.Stream<List<_i6.ChatMessage>>.empty(),
          )
          as _i4.Stream<List<_i6.ChatMessage>>);

  @override
  _i4.Future<void> sendMessage(_i6.ChatMessage? message) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [message]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateMessage(_i6.ChatMessage? message) =>
      (super.noSuchMethod(
            Invocation.method(#updateMessage, [message]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMessage(String? messageId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMessage, [messageId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> editMessage({
    required String? messageId,
    required String? newContent,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#editMessage, [], {
              #messageId: messageId,
              #newContent: newContent,
              #userId: userId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMessageWithValidation({
    required String? messageId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMessageWithValidation, [], {
              #messageId: messageId,
              #userId: userId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addReaction(
    String? messageId,
    String? userId,
    _i6.ReactionType? reaction,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addReaction, [messageId, userId, reaction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeReaction(String? messageId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#removeReaction, [messageId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> markMessagesAsRead(String? chatThreadId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#markMessagesAsRead, [chatThreadId, userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
